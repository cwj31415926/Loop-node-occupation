#include<cstdio>
#include<cstring>
#include<iostream>
#include<fstream>
#include <sstream>
#include<algorithm>
#include<vector>
#include<ctype.h>
#include <stdlib.h>
#include <io.h>
using namespace std;
#define FF(x1, x2) for(int i=x1; i<x2; i++)
struct edge{int u, v;};
int ln;int nodeN;
int dfs(int u, int father, edge *loop, int *first, int *Next, edge *a,
        edge *brige, int *dfn, int *invis, int root, int*low, int bn, int num)      //The father into the stack, avoid the inverse father-son edges
{
    invis[u] = 1;
    int child=0;
    dfn[u] = low[u] = ++num; //Define the dfn
    for(int e=first[u]; e!=-1; e=Next[e])
    {
        int v = a[e].v;
        if(!dfn[v]) //father-son edges
        {
            dfs(v, u, loop, first, Next, a, brige, dfn, invis, root, low, bn, num);

            child++;
            low[u] = low[u]<low[v]? low[u]: low[v];
            if(dfn[u]<low[v]) {brige[bn].u=u, brige[bn++].v=v;}        //loop
            else {{loop[ln].u=u, loop[ln++].v=v;}}
        }
        else if(v != father && invis[v])//Back-edges if(v != father): make sure the back father-son edges was forbidden.
        {
            loop[ln].u=u, loop[ln++].v=v;
            low[u] = low[u]<dfn[v]? low[u]: dfn[v];
        }
    }
    invis[u] = 0;
    return child;
}

void getAllFiles(const string &path, vector<string>& files)//read the data.
{
    long long hFile = 0;
    _finddata_t fileinfo;
    string p;
    if((hFile = _findfirst(p.assign(path).append("\\*").c_str(), &fileinfo)) != -1)
        {
        do {
            if((fileinfo.attrib & _A_SUBDIR))
            {
                if(strcmp(fileinfo.name, ".") != 0 && strcmp(fileinfo.name, "..") != 0)
                {
                    files.push_back(p.assign(path).append("\\").append(fileinfo.name));
                    getAllFiles(p.assign(path).append("\\").append(fileinfo.name), files);
                }
            }
            else
                files.push_back(p.assign(path).append("\\").append(fileinfo.name));
           } while(_findnext(hFile, &fileinfo) == 0);
        _findclose(hFile);
        }
}
void addedge(int u, int v, int e, int *first, int *Next, edge *all)//add edges.
{
      Next[e] = first[u];
      all[e].u = u;
      all[e].v = v;
      first[u] = e;
}
int main()
{
    ios::sync_with_stdio(false);
    // bulid the Filled_data folder
    system("mkdir gamma");
    const string mkdir = "mkdir ";
    const string gamma = "gamma";
    const string data = "testparts";//data folder
    const string dottxt = ".txt";
    ofstream fout;
    vector<string> files;
    int index = 0;
    files.clear();
    getAllFiles(data, files);
    fout.open((gamma + "\\"  "testparts"+ dottxt).c_str());// export the result file
    int len = files.size();
    for(int i = 0; i < len; ++i)
    {
        string line;
        ifstream f(files[i]);
        if(!f.is_open()){cout<<"error openfile"<<endl;return 1;}
        vector<int> item;
        vector<vector<int> > arr;
        while(!f.eof())//logging data.
        {
            int num=0;
            getline(f,line);
            if(line.empty())continue;
            istringstream input(line);
            item.clear();
            while(!input.eof())
            {
                input>>num;
                item.push_back(num);
            }
             arr.push_back(item);
        }
        f.close();

        int S=arr.size();
        int MAXM=2*S;
        int MAXN=2*S;
        int *first = new int[MAXN];
        int *Next = new int[MAXM];
        edge *all = new edge[MAXM];
        memset(first, -1, sizeof(int) * MAXN);//initialization

        nodeN=0;
        for(int j=0; j<S; j++)
        {
            int x=arr[j][0];
            int y=arr[j][1];
            addedge(x, y, j, first, Next, all);
            addedge(y, x, j+S, first, Next, all);
            nodeN = nodeN<x? x: nodeN;
            nodeN = nodeN<y? y: nodeN;//record the nodes number
        }
        edge *loop = new edge[MAXM];
        edge *brige = new edge[MAXM];
        int bn=0;
        ln=0;
        int *dfn = new int[MAXN];
        int *low = new int[MAXN];
        memset(dfn, 0, sizeof(int) * MAXN);
        int *invis = new int[MAXN];
        memset(invis, 0, sizeof(int) * MAXN);//initialization
        int root=1;
        int num=0;
        for (int i = 1; i <= nodeN; i++)
        {if (dfn[i] == 0)
             {
               dfs(i, i, loop, first, Next, all, brige, dfn, invis, root, low, bn, num);
             }
        }//DFS the networks
        vector <int> lp;
        for(int k=0; k<ln; k++)//extract the loop edges
        {
            lp.push_back(loop[k].u);
            lp.push_back(loop[k].v);
        }
        vector <int> temp;
        int o=0;
        int E=lp.size();
        for(int i=0; i<E; i++)//delete the repetitive loop nodes
        {
            int j = 0;
            while (j<o)
            {
                if (lp[i] == temp[j])
                {
                      break; // find the same nodes
                }
                j++;
            }
            if (j == o)
            {
                temp.push_back(lp[i]);
                o++;
            }
        }
        double Occ=(double)o/(double)nodeN;
        fout <<Occ<<dfn[15]<<endl;

        delete[]first;
        delete[]Next;
        delete[]all;
        delete[]loop;
        delete[]brige;
        delete[]dfn;
        delete[]low;
        delete[]invis;
    }
    fout.close();
    ++index;


    return 0;
}


